{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { loginPost } from \"../api/memberApi\";\nimport { getCookie, setCookie, removeCookie } from \"../util/cookieUtil\";\nconst initState = {\n  email: ''\n};\nexport const loginPostAsync = createAsyncThunk('loginPostAsync', param => {\n  return loginPost(param);\n});\nconst loadMemberCookie = () => {\n  //쿠키에서 로그인 정보 로딩 \n\n  const memberInfo = getCookie(\"member\");\n\n  //닉네임 처리 \n  if (memberInfo && memberInfo.nickname) {\n    memberInfo.nickname = decodeURIComponent(memberInfo.nickname);\n  }\n  return memberInfo;\n};\nconst loginSlice = createSlice({\n  name: 'LoginSlice',\n  initialState: loadMemberCookie() || initState,\n  //쿠키가 없다면 초깃값사용 \n  reducers: {\n    login: (state, action) => {\n      console.log(\"login.....\");\n      //{email, pw로 구성 }\n      const data = action.payload;\n\n      //새로운 상태 \n      return {\n        email: data.email\n      };\n    },\n    logout: (state, action) => {\n      console.log(\"logout....\");\n      removeCookie(\"member\");\n      return {\n        ...initState\n      };\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(loginPostAsync.fulfilled, (state, action) => {\n      console.log(\"fulfilled\");\n      const payload = action.payload;\n\n      //닉네임 한글 처리 \n      if (payload.nickname) {\n        payload.nickname = encodeURIComponent(payload.nickname);\n      }\n\n      //정상적인 로그인시에만 저장 \n      if (!payload.error) {\n        setCookie(\"member\", JSON.stringify(payload), 1); //1일\n      }\n      return payload;\n    }).addCase(loginPostAsync.pending, (state, action) => {\n      console.log(\"pending\");\n    }).addCase(loginPostAsync.rejected, (state, action) => {\n      console.log(\"rejected\");\n    });\n  }\n});\nexport const {\n  login,\n  logout\n} = loginSlice.actions;\nexport default loginSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","loginPost","getCookie","setCookie","removeCookie","initState","email","loginPostAsync","param","loadMemberCookie","memberInfo","nickname","decodeURIComponent","loginSlice","name","initialState","reducers","login","state","action","console","log","data","payload","logout","extraReducers","builder","addCase","fulfilled","encodeURIComponent","error","JSON","stringify","pending","rejected","actions","reducer"],"sources":["/Users/choseong-jin/react_spring_boot/front-end/mall/src/slices/loginSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport { loginPost } from \"../api/memberApi\";\r\n\r\nimport { getCookie, setCookie, removeCookie } from \"../util/cookieUtil\";\r\n\r\nconst initState = {\r\n    email:''\r\n}\r\n\r\nexport const loginPostAsync = createAsyncThunk('loginPostAsync', (param) => {\r\n\r\n  return loginPost(param)\r\n\r\n})\r\n\r\nconst loadMemberCookie = () => {  //쿠키에서 로그인 정보 로딩 \r\n\r\n  const memberInfo =  getCookie(\"member\")\r\n\r\n  //닉네임 처리 \r\n  if(memberInfo && memberInfo.nickname) {\r\n    memberInfo.nickname = decodeURIComponent(memberInfo.nickname)\r\n  }\r\n\r\n  return memberInfo\r\n}\r\n\r\n\r\nconst loginSlice = createSlice({\r\n  name: 'LoginSlice',\r\n  initialState: loadMemberCookie()|| initState, //쿠키가 없다면 초깃값사용 \r\n  reducers: {\r\n    login: (state, action) => {\r\n      console.log(\"login.....\")\r\n      //{email, pw로 구성 }\r\n      const data = action.payload\r\n      \r\n      //새로운 상태 \r\n      return {email: data.email}\r\n\r\n    },\r\n    logout: (state, action) => {\r\n        console.log(\"logout....\")\r\n\r\n        removeCookie(\"member\")\r\n        return {...initState}\r\n    }\r\n  },\r\n  extraReducers: (builder) => {\r\n    \r\n    builder.addCase( loginPostAsync.fulfilled, (state, action) => { \r\n      console.log(\"fulfilled\")\r\n\r\n      const payload = action.payload\r\n\r\n      //닉네임 한글 처리 \r\n      if(payload.nickname){\r\n        payload.nickname = encodeURIComponent(payload.nickname)\r\n      }\r\n\r\n      //정상적인 로그인시에만 저장 \r\n      if(!payload.error){\r\n        setCookie(\"member\",JSON.stringify(payload), 1) //1일\r\n      }\r\n\r\n      return payload\r\n\r\n    })\r\n\r\n    .addCase(loginPostAsync.pending, (state,action) => {\r\n        console.log(\"pending\")\r\n    })\r\n    .addCase(loginPostAsync.rejected, (state,action) => {\r\n        console.log(\"rejected\")\r\n    })\r\n  }\r\n})\r\n\r\nexport const {login,logout} = loginSlice.actions\r\n\r\nexport default loginSlice.reducer\r\n"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAChE,SAASC,SAAS,QAAQ,kBAAkB;AAE5C,SAASC,SAAS,EAAEC,SAAS,EAAEC,YAAY,QAAQ,oBAAoB;AAEvE,MAAMC,SAAS,GAAG;EACdC,KAAK,EAAC;AACV,CAAC;AAED,OAAO,MAAMC,cAAc,GAAGR,gBAAgB,CAAC,gBAAgB,EAAGS,KAAK,IAAK;EAE1E,OAAOP,SAAS,CAACO,KAAK,CAAC;AAEzB,CAAC,CAAC;AAEF,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAAG;;EAEhC,MAAMC,UAAU,GAAIR,SAAS,CAAC,QAAQ,CAAC;;EAEvC;EACA,IAAGQ,UAAU,IAAIA,UAAU,CAACC,QAAQ,EAAE;IACpCD,UAAU,CAACC,QAAQ,GAAGC,kBAAkB,CAACF,UAAU,CAACC,QAAQ,CAAC;EAC/D;EAEA,OAAOD,UAAU;AACnB,CAAC;AAGD,MAAMG,UAAU,GAAGb,WAAW,CAAC;EAC7Bc,IAAI,EAAE,YAAY;EAClBC,YAAY,EAAEN,gBAAgB,CAAC,CAAC,IAAGJ,SAAS;EAAE;EAC9CW,QAAQ,EAAE;IACRC,KAAK,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MACxBC,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;MACzB;MACA,MAAMC,IAAI,GAAGH,MAAM,CAACI,OAAO;;MAE3B;MACA,OAAO;QAACjB,KAAK,EAAEgB,IAAI,CAAChB;MAAK,CAAC;IAE5B,CAAC;IACDkB,MAAM,EAAEA,CAACN,KAAK,EAAEC,MAAM,KAAK;MACvBC,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;MAEzBjB,YAAY,CAAC,QAAQ,CAAC;MACtB,OAAO;QAAC,GAAGC;MAAS,CAAC;IACzB;EACF,CAAC;EACDoB,aAAa,EAAGC,OAAO,IAAK;IAE1BA,OAAO,CAACC,OAAO,CAAEpB,cAAc,CAACqB,SAAS,EAAE,CAACV,KAAK,EAAEC,MAAM,KAAK;MAC5DC,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;MAExB,MAAME,OAAO,GAAGJ,MAAM,CAACI,OAAO;;MAE9B;MACA,IAAGA,OAAO,CAACZ,QAAQ,EAAC;QAClBY,OAAO,CAACZ,QAAQ,GAAGkB,kBAAkB,CAACN,OAAO,CAACZ,QAAQ,CAAC;MACzD;;MAEA;MACA,IAAG,CAACY,OAAO,CAACO,KAAK,EAAC;QAChB3B,SAAS,CAAC,QAAQ,EAAC4B,IAAI,CAACC,SAAS,CAACT,OAAO,CAAC,EAAE,CAAC,CAAC,EAAC;MACjD;MAEA,OAAOA,OAAO;IAEhB,CAAC,CAAC,CAEDI,OAAO,CAACpB,cAAc,CAAC0B,OAAO,EAAE,CAACf,KAAK,EAACC,MAAM,KAAK;MAC/CC,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;IAC1B,CAAC,CAAC,CACDM,OAAO,CAACpB,cAAc,CAAC2B,QAAQ,EAAE,CAAChB,KAAK,EAACC,MAAM,KAAK;MAChDC,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;IAC3B,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAACJ,KAAK;EAACO;AAAM,CAAC,GAAGX,UAAU,CAACsB,OAAO;AAEhD,eAAetB,UAAU,CAACuB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}